# kind: StorageClass
# apiVersion: storage.k8s.io/v1
# metadata:
#   name: local-storage
#   annotations:
#     storageclass.kubernetes.io/is-default-class: "true"
#   labels:
#     kubernetes.io/cluster-service: "true"
#     addonmanager.kubernetes.io/mode: EnsureExists
# provisioner: kubernetes.io/no-provisioner
# volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry
type: Opaque
data:
  HTPASSWD: YWRtaW46JDJ5JDA1JFdsWDUySG1mLm11RzdPTTloOEdMenU5U2kxVnk5c21HcVdDVHFJN0EyOWQvS1lrMVVjbzhHCgo=
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: registry-pv
  labels:
    name: registry-pv
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  claimRef:
    namespace: default
    name: registry-pvc
  storageClassName: local-storage
  hostPath:
    path: "/mnt/registry_data"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: docker-registry
data:
  registry-config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
      filesystem:
        rootdirectory: /var/lib/registry
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
    auth:
      htpasswd:
        realm: basic-realm
        path: /auth/htpasswd
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: registry-pvc
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  selector:
    matchLabels:
      name: registry-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: registry
  name: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: registry
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: registry
    spec:
      containers:
        - image: registry:2
          imagePullPolicy: Always
          name: registry
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          volumeMounts:
            - name: storage
              mountPath: /var/lib/registry
            # - name: config
            #   mountPath: /etc/docker/registry
            #   readOnly: true
            - name: htpasswd
              mountPath: /auth
              readOnly: true
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 5
            timeoutSeconds: 30
          resources:
            requests:
              memory: "128Mi"
              cpu: "500m"
            limits:
              memory: "256Mi"
              cpu: "1000m"
      volumes:
        - name: htpasswd
          secret:
            secretName: docker-registry
            items:
            - key: HTPASSWD
              path: htpasswd
        - name: storage
          persistentVolumeClaim:
            claimName: registry-pvc
      # - name: certs
      #   hostPath:
      #     path: /mnt/registry_data/certs/
      # - name: auth
      #   hostPath:
      #     path: /mnt/registry_data/
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: registry
  labels:
    app: registry
spec:
  type: NodePort
  ports:
    - port: 5000
      targetPort: 5000
      protocol: TCP
  selector:
    app: registry
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: registry-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/tls-acme: "true"
    ingress.kubernetes.io/secure-backends: "true"
    ingress.kubernetes.io/proxy-body-size: 2048m
    ingress.kubernetes.io/client-max-body-size: 2048m
    nginx.ingress.kubernetes.io/client-max-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m

  namespace: default
spec:
  tls:
    - hosts:
        - registry.myhost.io
      secretName: registry-tls-secret
  rules:
    - host: registry.myhost.io
      http:
        paths:
          - path: /
            backend:
              serviceName: registry
              servicePort: 5000
